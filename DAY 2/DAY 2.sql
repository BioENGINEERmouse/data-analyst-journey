--- ğŸŸ¢ ALIASING (Takma Ad KullanÄ±mÄ±) ---
-- AS anahtar kelimesi ile kolonlara veya tablolara takma ad verebiliriz.
-- Daha okunaklÄ± ve anlamlÄ± Ã§Ä±ktÄ±lar elde etmemizi saÄŸlar.

SELECT gender, AVG(age) AS avg_age
FROM employee_demographics
GROUP BY gender
HAVING avg_age > 40;


--- ğŸŸ¢ JOINS (Tablo BirleÅŸtirme) ---
-- INNER JOIN: Ä°ki tablodaki eÅŸleÅŸen kayÄ±tlarÄ± getirir.

SELECT *
FROM employee_demographics
INNER JOIN employee_salary 
   ON employee_demographics.employee_id = employee_salary.employee_id;

-- Tablo isimlerine takma ad (alias) vererek daha okunaklÄ± hale getirme
SELECT dem.employee_id, age, occupation
FROM employee_demographics AS dem
INNER JOIN employee_salary AS sal
   ON dem.employee_id = sal.employee_id;

-- LEFT JOIN: Soldaki (ilk) tablodaki tÃ¼m verileri ve saÄŸdaki tablodan eÅŸleÅŸenleri getirir.
SELECT dem.employee_id, age, occupation
FROM employee_demographics AS dem
LEFT JOIN employee_salary AS sal
   ON dem.employee_id = sal.employee_id;

-- RIGHT JOIN: SaÄŸdaki (ikinci) tablodaki tÃ¼m verileri ve soldaki tablodan eÅŸleÅŸenleri getirir.
SELECT dem.employee_id, age, occupation
FROM employee_demographics AS dem
RIGHT JOIN employee_salary AS sal
   ON dem.employee_id = sal.employee_id;


--- ğŸŸ¢ SELF JOIN (Kendi Kendine JOIN) ---
-- AynÄ± tabloyu iki kez birleÅŸtirerek, belirli koÅŸullarla kÄ±yaslama yapmamÄ±zÄ± saÄŸlar.

SELECT emp1.employee_id AS emp_santa,
       emp1.first_name AS first_name_santa,
       emp1.last_name AS last_name_santa,
       emp2.first_name AS first_name_emp,
       emp2.last_name AS last_name_emp
FROM employee_salary AS emp1 
JOIN employee_salary AS emp2
   ON emp1.employee_id + 1 = emp2.employee_id;


--- ğŸŸ¢ MULTIPLE TABLE JOINS (Birden Fazla Tablo BirleÅŸtirme) ---
-- Birden fazla tabloyu aynÄ± sorguda JOIN ile birleÅŸtirerek daha kapsamlÄ± analizler yapabiliriz.

SELECT *
FROM employee_demographics AS dem 
INNER JOIN employee_salary AS sal
   ON dem.employee_id = sal.employee_id
INNER JOIN parks_departments AS pd
   ON sal.dept_id = pd.department_id;


--- ğŸŸ¢ UNION (TablolarÄ± BirleÅŸtirme) ---
-- UNION: Ä°ki veya daha fazla sorgunun sonucunu tek bir liste halinde dÃ¶ndÃ¼rÃ¼r.
-- UNION ALL: AynÄ± olan kayÄ±tlarÄ± da koruyarak birleÅŸtirir.

SELECT first_name, last_name
FROM employee_demographics
UNION ALL
SELECT first_name, last_name
FROM employee_salary;

-- Ã‡alÄ±ÅŸanlarÄ± belirli yaÅŸ kriterlerine gÃ¶re gruplandÄ±rma
SELECT first_name, last_name, "old man" AS label 
FROM employee_demographics
WHERE age > 40 AND gender = "male"
UNION  
SELECT first_name, last_name, "old lady" AS label 
FROM employee_demographics
WHERE age > 40 AND gender = "female"
UNION 
SELECT first_name, last_name, "highly paid employee" AS label
FROM employee_salary
WHERE salary > 70000
ORDER BY first_name, last_name;


--- ğŸŸ¢ STRING FUNCTIONS (Metin FonksiyonlarÄ±) ---
-- SQLâ€™de metinlerle Ã§alÄ±ÅŸmak iÃ§in kullanÄ±lan fonksiyonlar

-- Karakter uzunluÄŸu bulma
SELECT LENGTH("SKYFALL");

-- Metinleri bÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harfe Ã§evirme
SELECT UPPER("sky");
SELECT LOWER("SKY");

-- BoÅŸluklarÄ± temizleme
SELECT TRIM("    SKY    ");

-- Ä°smin ilk ve son birkaÃ§ karakterini alma
SELECT first_name, LEFT(first_name, 4), RIGHT(first_name, 4)
FROM employee_demographics;

-- Belirli karakterleri deÄŸiÅŸtirme
SELECT first_name, REPLACE(first_name, "a", "z")
FROM employee_demographics;

-- Metin iÃ§inde karakter arama
SELECT first_name, LOCATE("An", first_name)
FROM employee_demographics;

-- Ä°sim ve soyisimleri birleÅŸtirme
SELECT first_name, last_name, 
CONCAT(first_name, " ", last_name) AS full_name
FROM employee_demographics;


--- ğŸŸ¢ CASE STATEMENTS (KoÅŸullu Durumlar) ---
-- CASE, belirli koÅŸullara gÃ¶re farklÄ± Ã§Ä±ktÄ±lar Ã¼retmemizi saÄŸlar.

SELECT first_name, last_name, age,
CASE
   WHEN age <= 30 THEN "YOUNG"
   WHEN age BETWEEN 31 AND 50 THEN "OLD"
   WHEN age >= 50 THEN "GO TO HOLIDAY"
END AS Age_Bracket
FROM employee_demographics;


--- ğŸŸ¢ SUBQUERIES (Alt Sorgular) ---
-- Bir sorgunun iÃ§inde baÅŸka bir sorgu Ã§alÄ±ÅŸtÄ±rmak iÃ§in kullanÄ±lÄ±r.

-- DepartmanÄ± 1 olan Ã§alÄ±ÅŸanlarÄ± getir
SELECT *
FROM employee_demographics
WHERE employee_id IN 
   (SELECT employee_id
    FROM employee_salary
    WHERE dept_id = 1);

-- Ortalama maaÅŸÄ± gÃ¶steren bir sÃ¼tun ekleyerek Ã§alÄ±ÅŸan maaÅŸlarÄ±nÄ± kÄ±yasla
SELECT first_name, salary, 
   (SELECT AVG(salary) FROM employee_salary) AS average_salary
FROM employee_salary;


--- ğŸŸ¢ WINDOW FUNCTIONS (Pencere FonksiyonlarÄ±) ---
-- Veri kÃ¼meleri Ã¼zerinde satÄ±r bazlÄ± analizler yapmamÄ±zÄ± saÄŸlar.

SELECT first_name, salary,
       AVG(salary) OVER() AS overall_avg_salary
FROM employee_salary;
